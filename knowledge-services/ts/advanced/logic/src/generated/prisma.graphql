# source: http://13.77.154.13:4466/demo/dev
# timestamp: Tue Feb 05 2019 16:43:51 GMT-0800 (Pacific Standard Time)

type AggregateGrocer {
  count: Int!
}

type AggregateHello {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Grocer implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
}

"""A connection to a list of items."""
type GrocerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GrocerEdge]!
  aggregate: AggregateGrocer!
}

input GrocerCreateInput {
  email: String!
}

"""An edge in a connection."""
type GrocerEdge {
  """The item at the end of the edge."""
  node: Grocer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GrocerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
}

type GrocerPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
}

type GrocerSubscriptionPayload {
  mutation: MutationType!
  node: Grocer
  updatedFields: [String!]
  previousValues: GrocerPreviousValues
}

input GrocerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GrocerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GrocerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GrocerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GrocerWhereInput
}

input GrocerUpdateInput {
  email: String
}

input GrocerWhereInput {
  """Logical AND on all given filters."""
  AND: [GrocerWhereInput!]

  """Logical OR on all given filters."""
  OR: [GrocerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GrocerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
}

input GrocerWhereUniqueInput {
  id: ID
  email: String
}

type Hello {
  info: String
}

"""A connection to a list of items."""
type HelloConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HelloEdge]!
  aggregate: AggregateHello!
}

input HelloCreateInput {
  info: String
}

"""An edge in a connection."""
type HelloEdge {
  """The item at the end of the edge."""
  node: Hello!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HelloOrderByInput {
  info_ASC
  info_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type HelloPreviousValues {
  info: String
}

type HelloSubscriptionPayload {
  mutation: MutationType!
  node: Hello
  updatedFields: [String!]
  previousValues: HelloPreviousValues
}

input HelloSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HelloSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HelloSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HelloSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HelloWhereInput
}

input HelloUpdateInput {
  info: String
}

input HelloWhereInput {
  """Logical AND on all given filters."""
  AND: [HelloWhereInput!]

  """Logical OR on all given filters."""
  OR: [HelloWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HelloWhereInput!]
  info: String

  """All values that are not equal to given value."""
  info_not: String

  """All values that are contained in given list."""
  info_in: [String!]

  """All values that are not contained in given list."""
  info_not_in: [String!]

  """All values less than the given value."""
  info_lt: String

  """All values less than or equal the given value."""
  info_lte: String

  """All values greater than the given value."""
  info_gt: String

  """All values greater than or equal the given value."""
  info_gte: String

  """All values containing the given string."""
  info_contains: String

  """All values not containing the given string."""
  info_not_contains: String

  """All values starting with the given string."""
  info_starts_with: String

  """All values not starting with the given string."""
  info_not_starts_with: String

  """All values ending with the given string."""
  info_ends_with: String

  """All values not ending with the given string."""
  info_not_ends_with: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createGrocer(data: GrocerCreateInput!): Grocer!
  createHello(data: HelloCreateInput!): Hello!
  updateGrocer(data: GrocerUpdateInput!, where: GrocerWhereUniqueInput!): Grocer
  deleteGrocer(where: GrocerWhereUniqueInput!): Grocer
  upsertGrocer(where: GrocerWhereUniqueInput!, create: GrocerCreateInput!, update: GrocerUpdateInput!): Grocer!
  updateManyGrocers(data: GrocerUpdateInput!, where: GrocerWhereInput): BatchPayload!
  updateManyHelloes(data: HelloUpdateInput!, where: HelloWhereInput): BatchPayload!
  deleteManyGrocers(where: GrocerWhereInput): BatchPayload!
  deleteManyHelloes(where: HelloWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  grocers(where: GrocerWhereInput, orderBy: GrocerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Grocer]!
  helloes(where: HelloWhereInput, orderBy: HelloOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hello]!
  grocer(where: GrocerWhereUniqueInput!): Grocer
  grocersConnection(where: GrocerWhereInput, orderBy: GrocerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GrocerConnection!
  helloesConnection(where: HelloWhereInput, orderBy: HelloOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HelloConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  grocer(where: GrocerSubscriptionWhereInput): GrocerSubscriptionPayload
  hello(where: HelloSubscriptionWhereInput): HelloSubscriptionPayload
}
