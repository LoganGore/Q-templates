# source: http://localhost:8052
# timestamp: Sat Sep 29 2018 05:03:26 GMT-0700 (Pacific Daylight Time)

type AggregateArrow {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateObject {
  count: Int!
}

type Arrow implements Node {
  id: ID!
  category(where: CategoryWhereInput): Category!
  domain(where: ObjectWhereInput): Object!
  codomain(where: ObjectWhereInput): Object!
}

"""A connection to a list of items."""
type ArrowConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArrowEdge]!
  aggregate: AggregateArrow!
}

input ArrowCreateInput {
  category: CategoryCreateOneWithoutArrowsInput!
  domain: ObjectCreateOneWithoutArrowDomainsInput!
  codomain: ObjectCreateOneWithoutArrowCodomainsInput!
}

input ArrowCreateManyWithoutCategoryInput {
  create: [ArrowCreateWithoutCategoryInput!]
  connect: [ArrowWhereUniqueInput!]
}

input ArrowCreateManyWithoutCodomainInput {
  create: [ArrowCreateWithoutCodomainInput!]
  connect: [ArrowWhereUniqueInput!]
}

input ArrowCreateManyWithoutDomainInput {
  create: [ArrowCreateWithoutDomainInput!]
  connect: [ArrowWhereUniqueInput!]
}

input ArrowCreateWithoutCategoryInput {
  domain: ObjectCreateOneWithoutArrowDomainsInput!
  codomain: ObjectCreateOneWithoutArrowCodomainsInput!
}

input ArrowCreateWithoutCodomainInput {
  category: CategoryCreateOneWithoutArrowsInput!
  domain: ObjectCreateOneWithoutArrowDomainsInput!
}

input ArrowCreateWithoutDomainInput {
  category: CategoryCreateOneWithoutArrowsInput!
  codomain: ObjectCreateOneWithoutArrowCodomainsInput!
}

"""An edge in a connection."""
type ArrowEdge {
  """The item at the end of the edge."""
  node: Arrow!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ArrowOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ArrowPreviousValues {
  id: ID!
}

type ArrowSubscriptionPayload {
  mutation: MutationType!
  node: Arrow
  updatedFields: [String!]
  previousValues: ArrowPreviousValues
}

input ArrowSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ArrowSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArrowSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArrowSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ArrowWhereInput
}

input ArrowUpdateInput {
  category: CategoryUpdateOneWithoutArrowsInput
  domain: ObjectUpdateOneWithoutArrowDomainsInput
  codomain: ObjectUpdateOneWithoutArrowCodomainsInput
}

input ArrowUpdateManyWithoutCategoryInput {
  create: [ArrowCreateWithoutCategoryInput!]
  connect: [ArrowWhereUniqueInput!]
  disconnect: [ArrowWhereUniqueInput!]
  delete: [ArrowWhereUniqueInput!]
  update: [ArrowUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [ArrowUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ArrowUpdateManyWithoutCodomainInput {
  create: [ArrowCreateWithoutCodomainInput!]
  connect: [ArrowWhereUniqueInput!]
  disconnect: [ArrowWhereUniqueInput!]
  delete: [ArrowWhereUniqueInput!]
  update: [ArrowUpdateWithWhereUniqueWithoutCodomainInput!]
  upsert: [ArrowUpsertWithWhereUniqueWithoutCodomainInput!]
}

input ArrowUpdateManyWithoutDomainInput {
  create: [ArrowCreateWithoutDomainInput!]
  connect: [ArrowWhereUniqueInput!]
  disconnect: [ArrowWhereUniqueInput!]
  delete: [ArrowWhereUniqueInput!]
  update: [ArrowUpdateWithWhereUniqueWithoutDomainInput!]
  upsert: [ArrowUpsertWithWhereUniqueWithoutDomainInput!]
}

input ArrowUpdateWithoutCategoryDataInput {
  domain: ObjectUpdateOneWithoutArrowDomainsInput
  codomain: ObjectUpdateOneWithoutArrowCodomainsInput
}

input ArrowUpdateWithoutCodomainDataInput {
  category: CategoryUpdateOneWithoutArrowsInput
  domain: ObjectUpdateOneWithoutArrowDomainsInput
}

input ArrowUpdateWithoutDomainDataInput {
  category: CategoryUpdateOneWithoutArrowsInput
  codomain: ObjectUpdateOneWithoutArrowCodomainsInput
}

input ArrowUpdateWithWhereUniqueWithoutCategoryInput {
  where: ArrowWhereUniqueInput!
  data: ArrowUpdateWithoutCategoryDataInput!
}

input ArrowUpdateWithWhereUniqueWithoutCodomainInput {
  where: ArrowWhereUniqueInput!
  data: ArrowUpdateWithoutCodomainDataInput!
}

input ArrowUpdateWithWhereUniqueWithoutDomainInput {
  where: ArrowWhereUniqueInput!
  data: ArrowUpdateWithoutDomainDataInput!
}

input ArrowUpsertWithWhereUniqueWithoutCategoryInput {
  where: ArrowWhereUniqueInput!
  update: ArrowUpdateWithoutCategoryDataInput!
  create: ArrowCreateWithoutCategoryInput!
}

input ArrowUpsertWithWhereUniqueWithoutCodomainInput {
  where: ArrowWhereUniqueInput!
  update: ArrowUpdateWithoutCodomainDataInput!
  create: ArrowCreateWithoutCodomainInput!
}

input ArrowUpsertWithWhereUniqueWithoutDomainInput {
  where: ArrowWhereUniqueInput!
  update: ArrowUpdateWithoutDomainDataInput!
  create: ArrowCreateWithoutDomainInput!
}

input ArrowWhereInput {
  """Logical AND on all given filters."""
  AND: [ArrowWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArrowWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArrowWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  category: CategoryWhereInput
  domain: ObjectWhereInput
  codomain: ObjectWhereInput
}

input ArrowWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Category implements Node {
  id: ID!
  objects(where: ObjectWhereInput, orderBy: ObjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Object!]
  arrows(where: ArrowWhereInput, orderBy: ArrowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Arrow!]
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  objects: ObjectCreateManyWithoutCategoriesInput
  arrows: ArrowCreateManyWithoutCategoryInput
}

input CategoryCreateManyWithoutObjectsInput {
  create: [CategoryCreateWithoutObjectsInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateOneWithoutArrowsInput {
  create: CategoryCreateWithoutArrowsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutArrowsInput {
  objects: ObjectCreateManyWithoutCategoriesInput
}

input CategoryCreateWithoutObjectsInput {
  arrows: ArrowCreateManyWithoutCategoryInput
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CategoryPreviousValues {
  id: ID!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateInput {
  objects: ObjectUpdateManyWithoutCategoriesInput
  arrows: ArrowUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyWithoutObjectsInput {
  create: [CategoryCreateWithoutObjectsInput!]
  connect: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  delete: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutObjectsInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutObjectsInput!]
}

input CategoryUpdateOneWithoutArrowsInput {
  create: CategoryCreateWithoutArrowsInput
  connect: CategoryWhereUniqueInput
  delete: Boolean
  update: CategoryUpdateWithoutArrowsDataInput
  upsert: CategoryUpsertWithoutArrowsInput
}

input CategoryUpdateWithoutArrowsDataInput {
  objects: ObjectUpdateManyWithoutCategoriesInput
}

input CategoryUpdateWithoutObjectsDataInput {
  arrows: ArrowUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithWhereUniqueWithoutObjectsInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutObjectsDataInput!
}

input CategoryUpsertWithoutArrowsInput {
  update: CategoryUpdateWithoutArrowsDataInput!
  create: CategoryCreateWithoutArrowsInput!
}

input CategoryUpsertWithWhereUniqueWithoutObjectsInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutObjectsDataInput!
  create: CategoryCreateWithoutObjectsInput!
}

input CategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  objects_every: ObjectWhereInput
  objects_some: ObjectWhereInput
  objects_none: ObjectWhereInput
  arrows_every: ArrowWhereInput
  arrows_some: ArrowWhereInput
  arrows_none: ArrowWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  createObject(data: ObjectCreateInput!): Object!
  createArrow(data: ArrowCreateInput!): Arrow!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateObject(data: ObjectUpdateInput!, where: ObjectWhereUniqueInput!): Object
  updateArrow(data: ArrowUpdateInput!, where: ArrowWhereUniqueInput!): Arrow
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteObject(where: ObjectWhereUniqueInput!): Object
  deleteArrow(where: ArrowWhereUniqueInput!): Arrow
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  upsertObject(where: ObjectWhereUniqueInput!, create: ObjectCreateInput!, update: ObjectUpdateInput!): Object!
  upsertArrow(where: ArrowWhereUniqueInput!, create: ArrowCreateInput!, update: ArrowUpdateInput!): Arrow!
  updateManyCategories(data: CategoryUpdateInput!, where: CategoryWhereInput): BatchPayload!
  updateManyObjects(data: ObjectUpdateInput!, where: ObjectWhereInput): BatchPayload!
  updateManyArrows(data: ArrowUpdateInput!, where: ArrowWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyObjects(where: ObjectWhereInput): BatchPayload!
  deleteManyArrows(where: ArrowWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Object implements Node {
  id: ID!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  arrowDomains(where: ArrowWhereInput, orderBy: ArrowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Arrow!]
  arrowCodomains(where: ArrowWhereInput, orderBy: ArrowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Arrow!]
}

"""A connection to a list of items."""
type ObjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ObjectEdge]!
  aggregate: AggregateObject!
}

input ObjectCreateInput {
  categories: CategoryCreateManyWithoutObjectsInput
  arrowDomains: ArrowCreateManyWithoutDomainInput
  arrowCodomains: ArrowCreateManyWithoutCodomainInput
}

input ObjectCreateManyWithoutCategoriesInput {
  create: [ObjectCreateWithoutCategoriesInput!]
  connect: [ObjectWhereUniqueInput!]
}

input ObjectCreateOneWithoutArrowCodomainsInput {
  create: ObjectCreateWithoutArrowCodomainsInput
  connect: ObjectWhereUniqueInput
}

input ObjectCreateOneWithoutArrowDomainsInput {
  create: ObjectCreateWithoutArrowDomainsInput
  connect: ObjectWhereUniqueInput
}

input ObjectCreateWithoutArrowCodomainsInput {
  categories: CategoryCreateManyWithoutObjectsInput
  arrowDomains: ArrowCreateManyWithoutDomainInput
}

input ObjectCreateWithoutArrowDomainsInput {
  categories: CategoryCreateManyWithoutObjectsInput
  arrowCodomains: ArrowCreateManyWithoutCodomainInput
}

input ObjectCreateWithoutCategoriesInput {
  arrowDomains: ArrowCreateManyWithoutDomainInput
  arrowCodomains: ArrowCreateManyWithoutCodomainInput
}

"""An edge in a connection."""
type ObjectEdge {
  """The item at the end of the edge."""
  node: Object!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ObjectOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ObjectPreviousValues {
  id: ID!
}

type ObjectSubscriptionPayload {
  mutation: MutationType!
  node: Object
  updatedFields: [String!]
  previousValues: ObjectPreviousValues
}

input ObjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ObjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ObjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ObjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ObjectWhereInput
}

input ObjectUpdateInput {
  categories: CategoryUpdateManyWithoutObjectsInput
  arrowDomains: ArrowUpdateManyWithoutDomainInput
  arrowCodomains: ArrowUpdateManyWithoutCodomainInput
}

input ObjectUpdateManyWithoutCategoriesInput {
  create: [ObjectCreateWithoutCategoriesInput!]
  connect: [ObjectWhereUniqueInput!]
  disconnect: [ObjectWhereUniqueInput!]
  delete: [ObjectWhereUniqueInput!]
  update: [ObjectUpdateWithWhereUniqueWithoutCategoriesInput!]
  upsert: [ObjectUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input ObjectUpdateOneWithoutArrowCodomainsInput {
  create: ObjectCreateWithoutArrowCodomainsInput
  connect: ObjectWhereUniqueInput
  delete: Boolean
  update: ObjectUpdateWithoutArrowCodomainsDataInput
  upsert: ObjectUpsertWithoutArrowCodomainsInput
}

input ObjectUpdateOneWithoutArrowDomainsInput {
  create: ObjectCreateWithoutArrowDomainsInput
  connect: ObjectWhereUniqueInput
  delete: Boolean
  update: ObjectUpdateWithoutArrowDomainsDataInput
  upsert: ObjectUpsertWithoutArrowDomainsInput
}

input ObjectUpdateWithoutArrowCodomainsDataInput {
  categories: CategoryUpdateManyWithoutObjectsInput
  arrowDomains: ArrowUpdateManyWithoutDomainInput
}

input ObjectUpdateWithoutArrowDomainsDataInput {
  categories: CategoryUpdateManyWithoutObjectsInput
  arrowCodomains: ArrowUpdateManyWithoutCodomainInput
}

input ObjectUpdateWithoutCategoriesDataInput {
  arrowDomains: ArrowUpdateManyWithoutDomainInput
  arrowCodomains: ArrowUpdateManyWithoutCodomainInput
}

input ObjectUpdateWithWhereUniqueWithoutCategoriesInput {
  where: ObjectWhereUniqueInput!
  data: ObjectUpdateWithoutCategoriesDataInput!
}

input ObjectUpsertWithoutArrowCodomainsInput {
  update: ObjectUpdateWithoutArrowCodomainsDataInput!
  create: ObjectCreateWithoutArrowCodomainsInput!
}

input ObjectUpsertWithoutArrowDomainsInput {
  update: ObjectUpdateWithoutArrowDomainsDataInput!
  create: ObjectCreateWithoutArrowDomainsInput!
}

input ObjectUpsertWithWhereUniqueWithoutCategoriesInput {
  where: ObjectWhereUniqueInput!
  update: ObjectUpdateWithoutCategoriesDataInput!
  create: ObjectCreateWithoutCategoriesInput!
}

input ObjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ObjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ObjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ObjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  arrowDomains_every: ArrowWhereInput
  arrowDomains_some: ArrowWhereInput
  arrowDomains_none: ArrowWhereInput
  arrowCodomains_every: ArrowWhereInput
  arrowCodomains_some: ArrowWhereInput
  arrowCodomains_none: ArrowWhereInput
}

input ObjectWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  objects(where: ObjectWhereInput, orderBy: ObjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Object]!
  arrows(where: ArrowWhereInput, orderBy: ArrowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Arrow]!
  category(where: CategoryWhereUniqueInput!): Category
  object(where: ObjectWhereUniqueInput!): Object
  arrow(where: ArrowWhereUniqueInput!): Arrow
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  objectsConnection(where: ObjectWhereInput, orderBy: ObjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ObjectConnection!
  arrowsConnection(where: ArrowWhereInput, orderBy: ArrowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArrowConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  object(where: ObjectSubscriptionWhereInput): ObjectSubscriptionPayload
  arrow(where: ArrowSubscriptionWhereInput): ArrowSubscriptionPayload
}
